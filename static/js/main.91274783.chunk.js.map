{"version":3,"sources":["FrameCounter.jsx","App.js","serviceWorker.js","index.js"],"names":["FrameCounter","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","times","fps","measuring","inherits","createClass","key","value","prevProps","prevState","refreshLoop","_this2","_this$state","toConsumableArray","window","requestAnimationFrame","now","performance","length","shift","push","setState","_this$state2","react_default","a","createElement","onClick","toggleMeasuring","bind","React","Component","App","className","FrameCounter_FrameCounter","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAEaA,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,GACPC,IAAK,EACLC,WAAW,GALIV,EADrB,OAAAC,OAAAU,EAAA,EAAAV,CAAAJ,EAAAC,GAAAG,OAAAW,EAAA,EAAAX,CAAAJ,EAAA,EAAAgB,IAAA,qBAAAC,MAAA,SAUqBC,EAAWC,GACxBb,KAAKI,MAAMG,YAAcM,EAAUN,WACrCP,KAAKc,gBAZX,CAAAJ,IAAA,cAAAC,MAAA,WAegB,IAAAI,EAAAf,KAAAgB,EACahB,KAAKI,MAAxBE,EADMU,EACNV,IAAKC,EADCS,EACDT,UACLF,EAAKP,OAAAmB,EAAA,EAAAnB,CAAOE,KAAKI,MAAMC,OAEzBE,GAAWW,OAAOC,sBAAsB,WAE1C,IADA,IAAMC,EAAMC,YAAYD,MACjBf,EAAMiB,OAAS,GAAKjB,EAAM,IAAMe,EAAM,KAC3Cf,EAAMkB,QAERlB,EAAMmB,KAAKJ,GACXd,EAAMD,EAAMiB,OAEZP,EAAKU,SAAS,CAAEpB,QAAOC,QACvBS,EAAKD,kBA5BX,CAAAJ,IAAA,kBAAAC,MAAA,WAiCIX,KAAKyB,SAAS,CACZpB,MAAO,GACPC,IAAK,EACLC,WAAYP,KAAKI,MAAMG,cApC7B,CAAAG,IAAA,SAAAC,MAAA,WAwCW,IAAAe,EACgB1B,KAAKI,MAAbE,GADRoB,EACCrB,MADDqB,EACQpB,KAEf,OAAOqB,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,UAAQC,QAAS9B,KAAK+B,gBAAgBC,KAAKhC,OAA3C,cACA2B,EAAAC,EAAAC,cAAA,UAAKvB,QA7CbZ,EAAA,CAAkCuC,IAAMC,WCYzBC,MAVf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cAChBT,EAAAC,EAAAC,cAACQ,EAAD,SCIYC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.91274783.chunk.js","sourcesContent":["import React from 'react';\n\nexport class FrameCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      times: [],\n      fps: 0,\n      measuring: false,\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.measuring !== prevState.measuring)\n      this.refreshLoop();\n  }\n\n  refreshLoop() {\n    let { fps, measuring } = this.state;\n    const times = [...this.state.times];\n\n    if (measuring) window.requestAnimationFrame(() => {\n      const now = performance.now();\n      while (times.length > 0 && times[0] <= now - 1000) {\n        times.shift();\n      }\n      times.push(now);\n      fps = times.length;\n\n      this.setState({ times, fps });\n      this.refreshLoop();\n    });\n  }\n\n  toggleMeasuring() {\n    this.setState({\n      times: [],\n      fps: 0,\n      measuring: !this.state.measuring,\n    });\n  }\n\n  render() {\n    const { times, fps } = this.state;\n\n    return <div>\n        <button onClick={this.toggleMeasuring.bind(this)}>Toggle fps</button>\n        <h2>{fps}</h2>\n      </div>\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { FrameCounter } from './FrameCounter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FrameCounter />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}