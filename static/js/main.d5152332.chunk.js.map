{"version":3,"sources":["components/FrameCounter.jsx","Helpers.js","config.js","components/animations/CSSanimation.jsx","components/animations/GSAPanimation.jsx","App.js","serviceWorker.js","index.js"],"names":["FrameCounter","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","times","fps","measuring","inherits","createClass","key","value","prevProps","prevState","refreshLoop","_this2","_this$state","toConsumableArray","window","requestAnimationFrame","now","performance","length","shift","push","setState","_this$state2","react_default","a","createElement","ButtonToolbar","Button","variant","onClick","toggleMeasuring","bind","Badge","className","React","Component","random","min","max","Math","Number","getRandomColor","color","i","floor","animationConfig","generateAnimation","seed","styleSheet","document","styleSheets","animationName","concat","round","keyframes","insertRule","cssRules","CSSanimation","movementAnimation","animationTimingFunction","animationDuration","animationDelay","animationIterationCount","animationDirection","animationFillMode","particles","Array","particlesCount","fill","map","objectSpread","backgroundColor","style","stop","GSAPanimation","particlesRefs","particlesAnimations","TimelineMax","paused","particle","j","arguments","undefined","moveX","moveY","duration","TweenMax","to","x","y","ease","Power1","easeInOut","onComplete","add","_this3","ref","_this4","clear","_this5","_this$props","App","createRef","warning","animation","parseInt","animations","0","id","name","CSSanimation_CSSanimation","1","GSAPanimation_GSAPanimation","Container","Row","Col","xs","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","setParticles","Dropdown","as","ButtonGroup","onSelect","Toggle","split","Menu","keys","Item","eventKey","FrameCounter_FrameCounter","Alert","onClose","handleDismiss","dismissible","Boolean","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5152332.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, ButtonToolbar, Badge } from 'react-bootstrap';\n\nexport class FrameCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      times: [],\n      fps: 0,\n      measuring: false,\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.measuring !== prevState.measuring)\n      this.refreshLoop();\n  }\n\n  refreshLoop() {\n    let { fps, measuring } = this.state;\n    const times = [...this.state.times];\n\n    if (measuring) window.requestAnimationFrame(() => {\n      const now = performance.now();\n      while (times.length > 0 && times[0] <= now - 1000) {\n        times.shift();\n      }\n      times.push(now);\n      fps = times.length;\n\n      this.setState({ times, fps });\n      this.refreshLoop();\n    });\n  }\n\n  toggleMeasuring() {\n    this.setState({\n      times: [],\n      fps: 0,\n      measuring: !this.state.measuring,\n    });\n  }\n\n  render() {\n    const { times, fps } = this.state;\n\n    return <ButtonToolbar>\n        <Button variant='secondary' onClick={this.toggleMeasuring.bind(this)}>Toggle fps</Button>\n        <Badge className='frames' variant='light'>{fps}</Badge>\n      </ButtonToolbar>\n  }\n}\n","import React from 'react';\n\nexport const random = (min, max) => {\n    if (max == null) {\n        max = min;\n        min = 0;\n    }\n\n    return Math.random() * (max - min) + Number(min);\n}\n\nexport const getRandomColor = () => {\n  let letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n","\nexport var animationConfig = {\n  duration: 5,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/animation.css';\n\nimport { getRandomColor, random } from '../../Helpers';\nimport { animationConfig } from '../../config.js';\n\nconst generateAnimation = (seed, max) => {\n  let styleSheet = document.styleSheets[0];\n\n  let animationName = `animation${Math.round(random(max))}`;\n\n  let keyframes =\n  `@-webkit-keyframes ${animationName} {\n      10% {-webkit-transform:translate(${random(-seed, seed)}px, ${random(-seed, seed)}px)}\n      30% {-webkit-transform:translate(${random(-seed, seed)}px, ${random(-seed, seed)}px)}\n      50% {-webkit-transform:translate(${random(-seed, seed)}px, ${random(-seed, seed)}px)}\n      80% {-webkit-transform:translate(${random(-seed, seed)}px, ${random(-seed, seed)}px)}\n      100% {-webkit-transform:translate(${random(-seed, seed)}px, ${random(-seed, seed)}px)}\n  }`;\n\n  styleSheet.insertRule(keyframes, styleSheet.cssRules.length);\n\n  return animationName;\n}\n\nexport const CSSanimation = (props) => {\n\n  let movementAnimation = {\n      animationTimingFunction: 'ease-in-out',\n      animationDuration: `${animationConfig.duration}s`,\n      animationDelay: '0.0s',\n      animationIterationCount: 'infinite',\n      animationDirection: 'alternate',\n      animationFillMode: 'forwards'\n  }\n\n  const seeds = new Array(props.particlesCount).fill(Math.floor(random(200, 300)));\n  let particles = seeds.map((seed) => {\n    movementAnimation = {\n      ...movementAnimation,\n      animationName: generateAnimation(seed, props.particlesCount),\n      backgroundColor: getRandomColor()\n    }\n\n    return <div className=\"dot\" style={movementAnimation}></div>;\n  });\n\n  return <div className=\"animation-frame\">{props.stop ? null : particles}</div>;\n}\n\nCSSanimation.propTypes = {\n  particlesCount: PropTypes.number,\n  stop: PropTypes.bool,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TimelineMax, TweenMax, Power1 } from 'gsap/all';\n\nimport '../../styles/animation.css';\n\nimport { getRandomColor, random } from '../../Helpers';\nimport { animationConfig } from '../../config.js';\n\nexport class GSAPanimation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      seed: Math.floor(random(200, 300)),\n    }\n\n    this.particlesRefs = [];\n    this.particlesAnimations = new TimelineMax({ paused: true });\n  }\n\n  generateAnimation(particle, seed, j = 1, i = 0) {\n    let moveX = random(-seed, seed),\n      moveY = random(-seed, seed);\n\n    const duration = animationConfig.duration / 5;\n    if (i >= 5) {\n      moveX = 0;\n      moveY = 0;\n      i = 0;\n    }\n\n    return TweenMax.to(particle, duration, {\n      x: moveX,\n      y: moveY,\n      ease: Power1.easeInOut,\n      onComplete: () => this.particlesAnimations.add(this.generateAnimation(particle, seed, j + duration, i + 1), j),\n    });\n  }\n\n  componentDidMount() {\n    const { seed } = this.state;\n\n    this.particlesRefs.map((ref, i) => {\n      ref &&\n        this.particlesAnimations.add(this.generateAnimation(ref, seed), 0);\n    });\n\n    this.particlesAnimations.paused(this.props.stop);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.particlesCount !== prevProps.particlesCount) {\n      const { seed } = this.state;\n      this.particlesAnimations = this.particlesAnimations.clear();\n\n      this.particlesRefs.map((ref, i) => {\n        ref &&\n          this.particlesAnimations.add(this.generateAnimation(ref, seed), 0);\n      });\n    }\n\n    if (this.props.stop !== prevProps.stop) {\n      this.particlesAnimations.paused(!this.particlesAnimations.paused());\n    }\n  }\n\n  render() {\n    const { particlesCount, stop } = this.props;\n\n    this.particlesRefs = [];\n    const particles = [];\n\n    for (var i = 0; i < particlesCount; i++) {\n      particles.push(<div\n        className=\"dot\"\n        style={{ backgroundColor: getRandomColor() }}\n        ref={(ref) => { this.particlesRefs.push(ref);}}\n        ></div>);\n    }\n\n    return <div className=\"animation-frame\">{particles}</div>;\n  }\n}\n\nGSAPanimation.propTypes = {\n  particlesCount: PropTypes.number,\n  stop: PropTypes.bool,\n}\n","import React from 'react';\nimport {\n  InputGroup,\n  FormControl,\n  Button,\n  Container, Row, Col,\n  Alert,\n  Dropdown, ButtonGroup\n} from 'react-bootstrap';\n\nimport './styles/App.css';\n\nimport { FrameCounter } from './components/FrameCounter';\nimport { CSSanimation } from './components/animations/CSSanimation';\nimport { GSAPanimation } from './components/animations/GSAPanimation';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.particlesCount = React.createRef();\n\n    this.state = {\n      stop: true,\n      particles: 100,\n      warning: null,\n      animation: 0,\n    }\n  }\n\n  setParticles(value) {\n    value = parseInt(value);\n\n    value <= 10000 ?\n      this.setState({ particles: value }) :\n      this.setState({ warning: 'More than 10 000 particles will most likely crash your browser.'})\n  }\n\n  handleDismiss() {\n    this.setState({\n      warning: null,\n    });\n  }\n\n  render() {\n    const { stop, particles, warning, animation } = this.state;\n\n    const animations = {\n      0: {\n        id: 0,\n        name: 'CSS Animation',\n        animation: <CSSanimation stop={stop} particlesCount={particles} />,\n      },\n      1: {\n        id: 1,\n        name: 'Greensock JS Animation',\n        animation: <GSAPanimation stop={stop} particlesCount={particles} />,\n      },\n    }\n\n    return (\n      <div className='App'>\n        <Container>\n\n          <Row className='controls'>\n            <Col xs={3}>\n              <InputGroup className='mb-3'>\n                <FormControl\n                  placeholder='Particles count'\n                  aria-label='Particles count'\n                  aria-describedby='basic-addon2'\n                  ref={(ref) => { this.particlesCount = ref }}\n                />\n                <InputGroup.Append>\n                  <Button onClick={() => this.setParticles(this.particlesCount.value)} variant='secondary'>Submit</Button>\n                </InputGroup.Append>\n              </InputGroup>\n            </Col>\n\n            <Col xs={3}>\n              <Dropdown as={ButtonGroup} onSelect={(key) => this.setState({ animation: key })}>\n                <Button variant='primary' onClick={() => this.setState({ stop: !this.state.stop })}>Toggle animation</Button>\n                <Dropdown.Toggle split variant='primary' id='dropdown-split-basic' />\n                <Dropdown.Menu>\n                  {Object.keys(animations).map((key, i) => {\n                    return <Dropdown.Item key={`select-item-${i}`} eventKey={key}>{animations[key].name}</Dropdown.Item>;\n                  })}\n                </Dropdown.Menu>\n              </Dropdown>\n            </Col>\n\n            <Col>\n              <FrameCounter />\n            </Col>\n          </Row>\n\n          { warning && <Row><Col>\n            <Alert variant='warning' onClose={this.handleDismiss.bind(this)} dismissible>\n              { warning }\n            </Alert>\n          </Col></Row>}\n\n          {animations[animation] && <Row>\n            <Col>\n              <h3>{animations[animation].name}</h3>\n              {animations[animation].animation}\n            </Col>\n          </Row>}\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}